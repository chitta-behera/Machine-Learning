import pandas as pd
from sklearn import linear_model
import matplotlib.pyplot as plt
from matplotlib import style
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

# load sample dataset
price = [119000, 126000, 133000, 150000, 161000, 163000, 169000, 182000, 201000, 209000]
size = [1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]

x = np.array(size).reshape(-1, 1)
y = np.array(price)

# train the model
model = linear_model.LinearRegression()
model.fit(x, y)

#Splitting the data into Train and Test
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.70, random_state=0)

#Predicting the prices
pred = model.predict(xtest)

# intercept
print('Intercept: ', model.intercept_)
# The coefficients
print('Coefficients: ', model.coef_)
# The mean squared error
print("Mean squared error: %.2f" % mean_squared_error(ytest, pred))
# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % r2_score(ytest, pred))

#Visualizing the Test Results 
plt.scatter(xtest, ytest,  color='black')
plt.plot(xtest, pred, color='red', linewidth=1)
plt.xlabel('size of house')
plt.ylabel('house price')
plt.title('Linear Regression')
plt.grid(axis='y', linestyle='-')
plt.show()

#To make an individual prediction using the linear regression model
print(np.round(model.predict(1000), decimals=2))
